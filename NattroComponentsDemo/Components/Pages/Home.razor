@page "/"
@rendermode InteractiveServer
@using NattroComponents.Features.DataEditor.Definitions
@using NattroComponents.Features.DataEditor.Enum
@using System.Globalization

<PageTitle>Home</PageTitle>

<TabContainer TabDefinitions="_tabDefinitions" @ref="_tabContainer"></TabContainer>
@code
{
    private List<TabDefinition> _tabDefinitions = new();
    private TabContainer _tabContainer;

    protected override async Task OnInitializedAsync()
    {
        await LoadTabDefinitions();
        this.StateHasChanged();
    }

    // hard-coded tab configurations
    private async Task LoadTabDefinitions()
    {
        await Task.Run(() =>
        {
            List<TabDefinition> tabDefinitions = new();

            tabDefinitions.Add(new TabDefinition
            {
                Text = "My First Tab",
                TabContentDefinitions = new List<TabContentEditableGridDefinition>
                {
                    new TabContentEditableGridDefinition
                    {
                        JsonStringConfiguration = "[{\"DataType\":\"Number\",\"Name\":\"ID\",\"Visible\":false}," +
                                                  "{\"DataType\":\"Text\",\"Name\":\"Customer\",\"Required\":true,\"Width\":140,\"Editable\":true}," +
                                                  "{\"DataType\":\"Date\",\"Name\":\"Order Date\",\"Width\":170,\"Editable\":true}," +
                                                  "{\"DataType\":\"Number\",\"Name\":\"Order Number\",\"Width\":150,\"Editable\":true}," +
                                                  "{\"DataType\":\"Number\",\"Name\":\"Quantity\",\"Width\":190,\"Editable\":true}," +
                                                  "{\"DataType\":\"Text\",\"Name\":\"Description\",\"Width\":360,\"Editable\":true}," +
                                                  "{\"DataType\":\"Number\",\"Name\":\"Cost\",\"Required\":true,\"Width\":140,\"Editable\":true}," +
                                                  "{\"DataType\":\"TextArea\",\"Name\":\"Notes\",\"Width\":200,\"Editable\":true}," +
                                                  "{\"DataType\":\"Boolean\",\"Name\":\"Delivered\",\"Width\":140,\"Editable\":true}]",
                        GridFunctionality = GridFunctionalityEnum.Update,
                        LoadDataCallback = GetImports,
                        SaveDataCallback = (record) => SaveChanges(record, DataOperation.Update),
                        DeleteDataCallback = (record) => SaveChanges(record, DataOperation.Delete)
                    }
                }
            });
            this._tabDefinitions = tabDefinitions;

        });
    }

    private async Task<List<List<string>>> GetImports()
    {
        var daoResult = GetEnumerable();
        var rtnVal = daoResult.Select(r => new List<string>
        {
            r.Id.ToString(),
            r.Customer ?? "",
            r.OrderDate.ToString("O") ?? "",
            r.OrderNumber.ToString() ?? "",
            r.Quantity.ToString() ?? "",
            r.Description ?? "",
            r.Cost.ToString() ?? "",
            r.Notes ?? "",
            r.Delivered.ToString() ?? ""
        }).ToList();
        return rtnVal;
    }

    // Data update methods
    private async Task<bool> SaveChanges(List<string> rowToSave, DataOperation operation)
    {
        if (operation != DataOperation.Delete)
        {
            // Allow saving
            // fields 0, 1, 6
            int id = Int32.Parse(rowToSave[0], NumberStyles.Integer);
            string customer = rowToSave[1];
            string cost = rowToSave[6];

            // Call update procedure
            return true;
        }

        const string errMessage = "Import dataset does not support the delete operation.";
        throw new Exception(errMessage);
    }

    public record SampleData
    {
        public int Id { get; init; }
        public string Customer { get; init; }
        public DateOnly OrderDate { get; init; }
        public int OrderNumber { get; init; }
        public int Quantity { get; init; }
        public string Description { get; init; }
        public double Cost { get; init; }
        public string Notes { get; init; }
        public bool Delivered { get; init; }
    }

    public List<SampleData> GetEnumerable()
    {
        return new List<SampleData>
        {
            new SampleData
            {
                Id = 1,
                Customer = "Customer 1",
                OrderDate = new DateOnly(2021, 1, 1),
                OrderNumber = 1234,
                Quantity = 1,
                Description = "Description 1",
                Cost = 123.45,
                Notes = "Notes 1",
                Delivered = true
            },
            new SampleData
            {
                Id = 2,
                Customer = "Customer 2",
                OrderDate = new DateOnly(2021, 1, 2),
                OrderNumber = 1235,
                Quantity = 1,
                Description = "Description 2",
                Cost = 12.34,
                Notes = "Notes 2",
                Delivered = false
            },
            new SampleData
            {
                Id = 3,
                Customer = "Customer 3",
                OrderDate = new DateOnly(2021, 1, 3),
                OrderNumber = 1236,
                Quantity = 1,
                Description = "Description 3",
                Cost = 1.23,
                Notes = "Notes 3",
                Delivered = true
            },
            new SampleData
            {
                Id = 4,
                Customer = "Customer 4",
                OrderDate = new DateOnly(2021, 1, 3),
                OrderNumber = 1237,
                Quantity = 1,
                Description = "Description 4",
                Cost = 23.17,
                Notes = "Notes 4",
                Delivered = true
            },
            new SampleData
            {
                Id = 5,
                Customer = "Customer 5",
                OrderDate = new DateOnly(2021, 1, 5),
                OrderNumber = 1238,
                Quantity = 1,
                Description = "Description 5",
                Cost = 119.97,
                Notes = "Notes 5",
                Delivered = false
            }
        };
    }
}
